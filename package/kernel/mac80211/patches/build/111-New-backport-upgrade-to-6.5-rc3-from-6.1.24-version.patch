From ef82cca52af75f2c8bfad2f49b9af9e4bd972a6f Mon Sep 17 00:00:00 2001
From: Karthikeyan Kathirvel <quic_kathirve@quicinc.com>
Date: Tue, 26 Sep 2023 16:50:26 +0530
Subject: [PATCH] New backport upgrade to 6.5-rc3 from 6.1.24 version

This commit is for resolving the build issues caused by new backport
version upgrade. New file is added as part of linux-6.1 kernel build
issue. Below patch does not change any functionality.

Added function to give number of nodes in the list by traversing from
head. Removed some random interval generation which is not required
as compared to mainline. Add additional drop reason for skb buffer as
similar to mainline branch. Removed some unnescessary code from mac80211
which help in successful build.

Signed-off-by: Gautham Kumar Senthilkumaran <quic_gauthamk@quicinc.com>
---
 backport-include/linux/list_nulls.h |  15 +++++
 backport-include/linux/random.h     | 100 ----------------------------
 backport-include/linux/skbuff.h     |   1 +
 backport-include/net/dropreason.h   |  27 ++++++++
 net/mac80211/tx.c                   |   2 +-
 net/wireless/nl80211.c              |   4 +-
 net/wireless/sysfs.c                |   2 +-
 7 files changed, 47 insertions(+), 104 deletions(-)
 create mode 100644 backport-include/net/dropreason.h

--- a/backport-include/linux/list_nulls.h
+++ b/backport-include/linux/list_nulls.h
@@ -6,4 +6,19 @@
 #define NULLS_MARKER(value) (1UL | (((long)value) << 1))
 #endif
 
+/**
+ * list_count_nodes - count nodes in the list
+ * @head:   the head for your list.
+ */
+static inline size_t list_count_nodes(struct list_head *head)
+{
+	struct list_head *pos;
+	size_t count = 0;
+
+	list_for_each(pos, head)
+		count++;
+
+	return count;
+}
+
 #endif /* __BACKPORT_LIST_NULLS */
--- a/backport-include/linux/random.h
+++ b/backport-include/linux/random.h
@@ -23,104 +23,4 @@ static inline u16 get_random_u16(void)
 }
 #endif
 
-#if LINUX_VERSION_IS_LESS(6,2,0)
-static inline u32 __get_random_u32_below(u32 ceil)
-{
-	/*
-	 * This is the slow path for variable ceil. It is still fast, most of
-	 * the time, by doing traditional reciprocal multiplication and
-	 * opportunistically comparing the lower half to ceil itself, before
-	 * falling back to computing a larger bound, and then rejecting samples
-	 * whose lower half would indicate a range indivisible by ceil. The use
-	 * of `-ceil % ceil` is analogous to `2^32 % ceil`, but is computable
-	 * in 32-bits.
-	 */
-	u32 rand = get_random_u32();
-	u64 mult;
-
-	/*
-	 * This function is technically undefined for ceil == 0, and in fact
-	 * for the non-underscored constant version in the header, we build bug
-	 * on that. But for the non-constant case, it's convenient to have that
-	 * evaluate to being a straight call to get_random_u32(), so that
-	 * get_random_u32_inclusive() can work over its whole range without
-	 * undefined behavior.
-	 */
-	if (unlikely(!ceil))
-		return rand;
-
-	mult = (u64)ceil * rand;
-	if (unlikely((u32)mult < ceil)) {
-		u32 bound = -ceil % ceil;
-		while (unlikely((u32)mult < bound))
-			mult = (u64)ceil * get_random_u32();
-	}
-	return mult >> 32;
-}
-
-/*
- * Returns a random integer in the interval [0, ceil), with uniform
- * distribution, suitable for all uses. Fastest when ceil is a constant, but
- * still fast for variable ceil as well.
- */
-static inline u32 get_random_u32_below(u32 ceil)
-{
-	if (!__builtin_constant_p(ceil))
-		return __get_random_u32_below(ceil);
-
-	/*
-	 * For the fast path, below, all operations on ceil are precomputed by
-	 * the compiler, so this incurs no overhead for checking pow2, doing
-	 * divisions, or branching based on integer size. The resultant
-	 * algorithm does traditional reciprocal multiplication (typically
-	 * optimized by the compiler into shifts and adds), rejecting samples
-	 * whose lower half would indicate a range indivisible by ceil.
-	 */
-	BUILD_BUG_ON_MSG(!ceil, "get_random_u32_below() must take ceil > 0");
-	if (ceil <= 1)
-		return 0;
-	for (;;) {
-		if (ceil <= 1U << 8) {
-			u32 mult = ceil * get_random_u8();
-			if (likely(is_power_of_2(ceil) || (u8)mult >= (1U << 8) % ceil))
-				return mult >> 8;
-		} else if (ceil <= 1U << 16) {
-			u32 mult = ceil * get_random_u16();
-			if (likely(is_power_of_2(ceil) || (u16)mult >= (1U << 16) % ceil))
-				return mult >> 16;
-		} else {
-			u64 mult = (u64)ceil * get_random_u32();
-			if (likely(is_power_of_2(ceil) || (u32)mult >= -ceil % ceil))
-				return mult >> 32;
-		}
-	}
-}
-
-/*
- * Returns a random integer in the interval (floor, U32_MAX], with uniform
- * distribution, suitable for all uses. Fastest when floor is a constant, but
- * still fast for variable floor as well.
- */
-static inline u32 get_random_u32_above(u32 floor)
-{
-	BUILD_BUG_ON_MSG(__builtin_constant_p(floor) && floor == U32_MAX,
-			 "get_random_u32_above() must take floor < U32_MAX");
-	return floor + 1 + get_random_u32_below(U32_MAX - floor);
-}
-
-/*
- * Returns a random integer in the interval [floor, ceil], with uniform
- * distribution, suitable for all uses. Fastest when floor and ceil are
- * constant, but still fast for variable floor and ceil as well.
- */
-static inline u32 get_random_u32_inclusive(u32 floor, u32 ceil)
-{
-	BUILD_BUG_ON_MSG(__builtin_constant_p(floor) && __builtin_constant_p(ceil) &&
-			 (floor > ceil || ceil - floor == U32_MAX),
-			 "get_random_u32_inclusive() must take floor <= ceil");
-	return floor + get_random_u32_below(ceil - floor + 1);
-}
-#endif /* <6.2 */
-
-
 #endif /* __BACKPORT_RANDOM_H */
--- a/backport-include/linux/skbuff.h
+++ b/backport-include/linux/skbuff.h
@@ -1,5 +1,6 @@
 #ifndef __BACKPORT_SKBUFF_H
 #define __BACKPORT_SKBUFF_H
+#include_next <net/dropreason.h>
 #include_next <linux/skbuff.h>
 #include <linux/version.h>
 
--- /dev/null
+++ b/backport-include/net/dropreason.h
@@ -0,0 +1,32 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#ifndef __BACKPORT_LINUX_DROPREASON_H
+#define __BACKPORT_LINUX_DROPREASON_H
+
+/**
+ * enum skb_drop_reason_subsys - subsystem tag for (extended) drop reasons
+ */
+enum skb_drop_reason_subsys {
+	/** @SKB_DROP_REASON_SUBSYS_CORE: core drop reasons defined above */
+	SKB_DROP_REASON_SUBSYS_CORE,
+
+	/**
+	 * @SKB_DROP_REASON_SUBSYS_MAC80211_UNUSABLE: mac80211 drop reasons
+	 * for unusable frames, see net/mac80211/drop.h
+	 */
+	SKB_DROP_REASON_SUBSYS_MAC80211_UNUSABLE,
+
+	/**
+	 * @SKB_DROP_REASON_SUBSYS_MAC80211_MONITOR: mac80211 drop reasons
+	 * for frames still going to monitor, see net/mac80211/drop.h
+	 */
+	SKB_DROP_REASON_SUBSYS_MAC80211_MONITOR,
+
+	/** @SKB_DROP_REASON_SUBSYS_NUM: number of subsystems defined */
+	SKB_DROP_REASON_SUBSYS_NUM
+};
+
+#endif
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -26,7 +26,7 @@
 #include <net/codel_impl.h>
 #include <asm/unaligned.h>
 #include <net/fq_impl.h>
-#include <net/gso.h>
+//#include <net/gso.h>
 
 #include "ieee80211_i.h"
 #include "driver-ops.h"
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -16397,7 +16397,7 @@ static u32 nl80211_internal_flags[] = {
 #undef SELECTOR
 };
 
-static int nl80211_pre_doit(const struct genl_split_ops *ops,
+static int nl80211_pre_doit(const struct genl_ops *ops,
 			    struct sk_buff *skb,
 			    struct genl_info *info)
 {
@@ -16499,7 +16499,7 @@ out_unlock:
 	return err;
 }
 
-static void nl80211_post_doit(const struct genl_split_ops *ops,
+static void nl80211_post_doit(const struct genl_ops *ops,
 			      struct sk_buff *skb,
 			      struct genl_info *info)
 {
--- a/net/wireless/sysfs.c
+++ b/net/wireless/sysfs.c
@@ -154,7 +154,7 @@ static SIMPLE_DEV_PM_OPS(wiphy_pm_ops, w
 #define WIPHY_PM_OPS NULL
 #endif
 
-static const void *wiphy_namespace(const struct device *d)
+static const void *wiphy_namespace(struct device *d)
 {
 	struct wiphy *wiphy = container_of(d, struct wiphy, dev);
 
